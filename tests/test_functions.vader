Before:
  fun! CreateDirIfNotExists(dirname) "{{{
    if !isdirectory(a:dirname)
     call mkdir(a:dirname, 'p')
    endif
  endfunction "}}}
  fun! Init_vader_tests() "}}}
    let g:path_to_script = substitute(expand('<sfile>:p:h'), '[\\/]$', '', '')
    call CreateDirIfNotExists(g:path_to_script . '/code-slices/slices')
    let lines = ['Group default foo', 'Slice foo 1', 'this']
    let lines += ['is', 'a', 'slice']
    let lines += ['Slice foo 2', 'This', 'is', 'too']
    call writefile(lines, g:path_to_script . '/code-slices/slices/foo.slices')
    let g:old_path = g:slices_preferred_path
    let g:slices_preferred_path = g:path_to_script . '/code-slices/'
    set ft=foo
  endfunction "}}}
  call Init_vader_tests()
After:
  fun! Clean_test_mess()
    if has('win32')
      call system('rmdir /q /s ' . g:path_to_script . '/code-slices')
    else
      call system('rm -rf ' . g:path_to_script . '/code-slices')
    endif
    let g:slices_preferred_path = g:old_path
    unlet g:old_path
    unlet g:path_to_script
  endfunction
  call Clean_test_mess()
Given:
Do:
  :ShowSlices\<CR>\<CR>
Expect:
  this
  is
  a
  slice

Given:
      
Do:
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
      This
      is
      too

Given:
          a
          new
          slice
Do:
  :setlocal sts=4 ts=4 sw=4\<CR>
  ggv2j:CreateSlice funk\<CR>
  G
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
          a
          new
          slice
          a
          new
          slice

Before:
  call Init_vader_tests()
  let file_name = g:path_to_script . '/code-slices/slices/foo.slices'
  let lines = readfile(file_name)
  let lines += ['Slice indented', '  this', '    is', '    a', '      indented', '    slice']
  call writefile(lines, file_name)
  setlocal sts=5 ts=5 sw=5
After:
  call Clean_test_mess()
Given:
  one two
Do:
  :echom getline(1)\<CR>
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
  one two
  this
       is
       a
            indented
       slice

Before:
  call Init_vader_tests()
After:
  call Clean_test_mess()

Given:
  is
  a
  fluent
  slice
Do:
  ggV3j:CreateFluentSlice fluent\<CR>G:ShowSlices\<CR>\<BS>\<CR>\<CR>\<CR>\<CR>
Expect:
  is
  a
  fluent
  slice
  is
  a
  fluent
  slice

Given:
  
Do:
  :EditSlicesFile\<CR>ggyG\<C-o>:sp\<CR>
  \<C-o>:bd!\<CR>:%d\<CR>pggdd

Expect:
  Group default foo
  Slice foo 1
  this
  is
  a
  slice
  Slice foo 2
  This
  is
  too


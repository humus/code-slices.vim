Before:
  let path_to_script = expand('<sfile>:p:h')
  call mkdir(path_to_script . '/code-slices')
  call mkdir(path_to_script . '/code-slices/slices')
  let lines = ['Grup default foo', 'Slice foo 1', 'this']
  let lines += ['is', 'a', 'slice']
  let lines += ['Slice foo 2'
    \, 'This', 'is', 'too']
  call writefile(lines, path_to_script . '/code-slices/slices/foo.slices')
  let g:old_path = g:slices_preferred_path
  let g:slices_preferred_path = path_to_script . '/code-slices/'
  set ft=foo

After:
  if has('win32')
    call system('rmdir /q /s ' . path_to_script . '\code-slices')
  else
    call system('rm -rf ' . path_to_script . '/code-slices')
  endif
  let g:slices_preferred_path = g:old_path
  unlet g:old_path

Given:
Do:
  :ShowSlices\<CR>\<Tab>\<CR>
Expect:
  this
  is
  a
  slice

Given:
      
Do:
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
      This
      is
      too

Before:
  setf foo
  call mkdir(path_to_script . '/code-slices')
  call mkdir(path_to_script . '/code-slices/slices')
  let g:old_path = g:slices_preferred_path
  let g:slices_preferred_path = path_to_script . '/code-slices/'
After:
  if has('win32')
    call system('rmdir /q /s ' . path_to_script . '\code-slices')
  else
    call system('rm -rf ' . path_to_script . '/code-slices')
  endif
  let g:slices_preferred_path = g:old_path
Given:
      a
      new
      slice
Do:
  :1,3 call New_slice_from_range('funk')\<CR>
  G
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
      a
      new
      slice
      a
      new
      slice

Given:
          a
          new
          slice
Do:
  :1,3 call New_slice_from_range('funk')\<CR>
  G
  :ShowSlices\<CR>\<BS>\<CR>
Expect:
          a
          new
          slice
          a
          new
          slice
